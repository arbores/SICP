(define (make-dequeue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue." front-ptr)
          (mcar front-ptr)))
    (define (rear-queue)
      (if (empty-queue?)
          (error "REAR called with an empty queue." front-ptr)
          (mcar front-ptr)))
    (define (insert-queue! item not-empty-case-proc)
      (let ((new-item (mcons item '())))
        (if (empty-queue?)
            (begin
              (set! front-ptr new-item)
              (set! rear-ptr new-item)
              front-ptr)
            (begin
              (not-empty-case-proc new-item)
              front-ptr))))
    (define (front-insert-queue! item)
      (insert-queue! item 
                     (lambda (new-item)
                       (set-mcdr! new-item front-ptr)
                       (set! front-ptr new-item))))      
    (define (rear-insert-queue! item)
      (insert-queue! item
                     (lambda (new-item)
                       (set-mcdr! rear-ptr new-item)
                       (set! rear-ptr new-item))))
    (define (delete-queue! proc)
      (if (empty-queue?)
          (error "DELETE called with an empty queue." front-ptr)
          (begin 
            (proc)
            front-ptr)))
    (define (front-delete-queue!)
      (delete-queue! (lambda ()
                       (set! front-ptr (mcdr front-ptr)))))
    (define (previous-pair ls target)
      (cond ((null? ls) false)
            ((eq? (mcdr ls) target) ls)
            (else
             (previous-pair (mcdr ls) target))))
    (define (rear-delete-queue!)
      (delete-queue! (lambda ()
                       (let ((pre-pair (previous-pair front-ptr rear-ptr)))
                         (if pre-pair
                             (begin
                               (set-mcdr! pre-pair '())
                               (set! rear-ptr pre-pair))
                             (set! front-ptr '()))))))
                         
    (define (dispatch m) 
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-insert-queue!) front-insert-queue!)
            ((eq? m 'rear-insert-queue!) rear-insert-queue!)
            ((eq? m 'front-delete-queue!) (front-delete-queue!))
            ((eq? m 'rear-delete-queue!) (rear-delete-queue!))
            (else 
             (error "undefined operation -- DISPATCH" m))))
    dispatch))
(define (empty-queue? queue) (queue 'empty-queue?))
(define (front-insert-queue! queue item) ((queue 'front-insert-queue!) item))
(define (rear-insert-queue! queue item) ((queue 'rear-insert-queue!) item))
(define (front-delete-queue! queue) (queue 'front-delete-queue!))
(define (rear-delete-queue! queue) (queue 'rear-delete-queue!))


;;test
(define (exec-commands ls)
  (if (not (null? ls))
      (begin
        (display (format "> ~a\n" (car ls)))
        (display 
         (with-handlers ([exn:fail?
                          (lambda (e) (display e)(newline))])
           (eval (car ls))))
        (newline)
        (exec-commands (cdr ls)))))
(exec-commands   
 '((define q (make-dequeue))
   (front-insert-queue! q 1)
   (rear-insert-queue! q 2)
   (front-insert-queue! q 0)
   (rear-insert-queue! q 3)
   (front-delete-queue! q)
   (front-delete-queue! q)
   (rear-delete-queue! q)
   (rear-delete-queue! q)
   (rear-delete-queue! q)
   (rear-insert-queue! q 3)
   (front-delete-queue! q)
   (front-delete-queue! q)))
