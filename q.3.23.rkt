(define (make-dequeue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue." front-ptr)
          (mcar front-ptr)))
    (define (rear-queue)
      (if (empty-queue?)
          (error "REAR called with an empty queue." front-ptr)
          (mcar front-ptr)))
    (define (insert-queue! item not-empty-case-proc)
      (let ((new-item (mcons item '())))
        (if (empty-queue?)
            (begin
              (set! front-ptr new-item)
              (set! rear-ptr new-item)
              front-ptr)
            (begin
              (not-empty-case-proc new-item)
              front-ptr))))
    (define (front-insert-queue! item)
      (insert-queue! item 
                     (lambda (new-item)
                       (set-mcdr! new-item front-ptr)
                       (set! front-ptr new-item))))      
    (define (rear-insert-queue! item)
      (insert-queue! item
                     (lambda (new-item)
                       (set-mcdr! rear-ptr new-item)
                       (set! rear-ptr new-item))))
    (define (delete-queue!)
      (if (empty-queue?)
          (error "DELETE called with an empty queue." queue)
          (begin 
            (set! front-ptr (mcdr front-ptr))
            front-ptr)))
    (define (front-delete-queue!)
      (delete-queue! (lambda ()
                       (set! front-ptr (mcdr front-ptr)))))
    (define (previous-pair ls target)
      (cond ((null? ls) false)
            ((eq? (cdr ls) target) ls)
            (else
             (previous-pair (cdr ls) target))))
    (define (rear-delete-queue!)
      (delete-queue! (lambda ()
                       (let ((pre-pair (previous-pair front-ptr rear-ptr)))
                         (set-mcdr! pre-pair '())
                         (set! rear-ptr pre-pair)))))
                         
    (define (dispatch m) 
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-insert-queue!) insert-queue!)
            ((eq? m 'rear-insert-queue!) insert-queue!)
            ((eq? m 'front-delete-queue!) (delete-queue!))
            ((eq? m 'rear-delete-queue!) (delete-queue!))
            (else 
             (error "undefined operation -- DISPATCH" m))))
    dispatch))
(define (empty-queue? queue) (queue 'empty-queue?))
(define (front-insert-queue! queue item) ((queue 'front-insert-queue!) item))
(define (rear-insert-queue! queue item) ((queue 'rear-insert-queue!) item))
(define (front-delete-queue! queue) (queue 'front-delete-queue!))
(define (rear-delete-queue! queue) (queue 'rear-delete-queue!))

(define q (make-queue))

